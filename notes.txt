----- TO-DO ------

- Do pages for all the links in Left Menu 
    
- Decide where the new post button will be located 
    Button 
    Text Box
    Multimedia option

- Context box when hovering on a user profile
- Following and For You page feeds


----- DOMAIN ------
    synkapp.co.uk 
        or
    "synkapp" with related top level domain (TLD) e.g. .net .com .online etc.
    use namecheap.com // other reputeable domain and server hosting site


---------------- BACKEND FOR LOGIN AND SIGNUP PAGE ------------------
    -- Try prototype database from home.
        With other devices
        Login/Sign Out

    1. Set Up a Database:

    Choose a database system (e.g., MySQL, PostgreSQL, MongoDB) to store user information.
    Create a database schema or table to store user profiles, including fields like username, email, password (hashed and salted), and any other relevant user data.
    2. Create a Sign-Up Form:

    Design a sign-up form that collects user information such as username, email, and password. Ensure that you validate user inputs on the client and server-side to prevent security vulnerabilities.
    3. Server-Side Processing:

    Set up a server (e.g., using Node.js, Python, PHP) to handle form submissions.
    Validate and sanitize user inputs on the server-side to prevent SQL injection, cross-site scripting (XSS), and other security issues.
    Hash and salt the user's password before storing it in the database for security. Never store plain text passwords.
    4. Database Interaction:

    Use server-side code to connect to the database and insert the user's profile data into the appropriate table.
    5. User Authentication:

    Implement a login page with a form that collects the user's credentials (e.g., username/email and password).
    6. Server-Side Authentication:

    On the server-side, retrieve the user's data from the database based on their provided credentials.
    Compare the hashed and salted password from the database with the provided password to authenticate the user.
    7. Session Management or Token-Based Authentication:

    Implement a session management system or token-based authentication to keep the user logged in across different pages or visits.
    8. Redirect on Successful Login:

    After successful login, redirect the user to their profile page or the main application.
    9. Error Handling:

    Implement proper error handling for both sign-up and login processes. Display meaningful error messages to users when issues occur.
    10. Security Measures:

    Implement security measures like rate limiting, account lockouts, and CAPTCHA to prevent brute force attacks.
    11. Testing:
